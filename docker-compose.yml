version: "3.9"

services:
  db:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    env_file:
      - app.env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${DB_USER}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    image: bdsdmiii/burgermanagement-backend:latest   # <--- récupéré depuis Docker Hub
    container_name: spring_app
    restart: always
    env_file:
      - app.env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - backend_uploads:/app/uploads

  frontend:
    image: bdsdmiii/burgermanagement-frontend:latest  # <--- récupéré depuis Docker Hub
    container_name: angular_app
    restart: always
    ports:
      - "4200:80"
    depends_on:
      - backend

volumes:
  db_data:
  backend_uploads:
version: "3.9"

services:
  db:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    env_file:
      - app.env
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    ports:
      - "${DB_PORT}:3306"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u${DB_USER}", "-p${DB_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    image: bdsdmiii/burgermanagement-backend:latest   # <--- récupéré depuis Docker Hub
    container_name: spring_app
    restart: always
    env_file:
      - app.env
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8080:8080"
    volumes:
      - backend_uploads:/app/uploads

  frontend:
    image: bdsdmiii/burgermanagement-frontend:latest  # <--- récupéré depuis Docker Hub
    container_name: angular_app
    restart: always
    ports:
      - "4200:80"
    depends_on:
      - backend

volumes:
  db_data:
  backend_uploads:
